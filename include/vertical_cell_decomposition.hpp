#include "utils.hpp"
#include "intersection.hpp"


/*!
* Sort vertices of polygons.
* @param[in]  obstacles           The obstacles.
*/
std::vector<Point> sort_vertices(std::vector< std::vector<Point> > obstacles);


/*!
* Get the vertical segments generated by the VCD algorithm.
* @param[in]  boundary            The boundary of the arena.
* @param[in]  sorted_vertices     The sorted vertices.
* @param[in]  obstacles           The obstacles.
*/
std::vector< std::vector<Point> > create_segments_vertical_decomposition(std::vector<Point> boundary, std::vector<Point> sorted_vertices, std::vector<Polygon> obstacles);


/*!
* Find the cells generated from the VCD algorithm.
* @param[in]  segments            The vertical segments generated by the VCD algorithm.
* @param[in]  boundary            The boundary of the arena.
* @param[in]  sorted_vertices     The sorted vertices.
* @param[in]  obstacles           The obstacles.
*/
std::vector< std::vector<Point> > find_cells(std::vector<Point> boundary, std::vector< std::vector<Point> > segments, std::vector<Point> sorted_vertices, std::vector< std::vector<Point> > obstacles);


/*!
* Get the cell centroid.
* @param[in]  cell            The cell for which return the cenntroid.
*/
Point get_cell_centroid(std::vector<Point> cell);


/*!
* Create the roadmap returning the list of centroids and the adjacency matrix.
* @param[in]  cells            The cells generated from the VCD algorithm.
* @param[in]  obstacles        The obstacless.
*/
std::tuple< std::vector<Point>, std::vector< std::vector<int> > > create_roadmap(std::vector< std::vector<Point> > cells, std::vector< std::vector<Point> > obstacles);


/*!
* Run the BFS algorithms in order to obtain all the possible paths that leads to the target.
* @param[in]  adjacency_matrix            The adjacency matrix of the roadmap.
* @param[in]  source                      The index of the source node.
* @param[in]  target                      The index of the target node.
*/
std::vector< std::vector<int> > bfs(std::vector< std::vector<int> > adjacency_matrix, int source, int target);

