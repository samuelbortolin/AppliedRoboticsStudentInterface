#include <tuple>
#include "utils.hpp"
#include "intersection.hpp"


/*!
* Sort vertices of polygons.
* @param[in]  obstacles           The obstacles.
*/
std::vector <std::tuple<Point, int> > sort_vertices(std::vector< std::vector<Point> > obstacles);


/*!
* Get the vertical segments generated by the VCD algorithm.
* @param[in]  sorted_vertices     The sorted vertices.
* @param[in]  obstacles           The obstacles.
* @param[in]  lower_limit         The lower limit of the arena (y coordinate).
* @param[in]  upper_limit         The upper limit of the arena (y coordinate).
*/
std::vector< std::vector<Point> > create_segments_vertical_decomposition(std::vector <std::tuple<Point, int> > sorted_vertices, std::vector<Polygon> obstacles, float lower_limit, float upper_limit);


/*!
* Find the cells generated from the VCD algorithm.
* @param[in]  boundary            The boundary of the arena.
* @param[in]  sorted_vertices     The sorted vertices.
* @param[in]  obstacles           The obstacles.
*/
std::vector<Polygon> find_cells(std::vector<Point> boundary, std::vector <std::tuple<Point, int> > sorted_vertices, std::vector< std::vector<Point> > obstacles);


/*!
* Get the cell centroid.
* @param[in]  cell            The cell for which return the cenntroid.
*/
Point get_cell_centroid(Polygon cell);


/*!
* Merge cells.
* @param[in]  cells            The cells generated from the VCD algorithm.
*/
std::vector<Polygon> merge_cells(std::vector<Polygon> cells);


/*!
* Create the roadmap returning the list of centroids and the adjacency matrix.
* @param[in]  cells            The cells generated from the VCD algorithm.
* @param[in]  obstacles        The obstacless.
*/
std::tuple< std::vector<Point>, std::vector< std::vector<int> > > create_roadmap(std::vector< std::vector<Point> > cells, std::vector< std::vector<Point> > obstacles);

